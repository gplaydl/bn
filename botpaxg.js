// botpaxg.js
'use strict';

const express = require('express');
const axios = require('axios').default;
const crypto = require('crypto');

const app = express();
app.use(express.json());

// ====== C·∫•u h√¨nh ng∆∞·ªùi d√πng ======
const SYMBOL = 'PAXGUSDT';
const QUOTE = 'USDT';
const BASE = 'PAXG';
const BUY_AMOUNT_USD = 80;        // s·ªë USDT cho m·ªói l·ªánh mua
const INTERVAL = 30_000;          // 30s m·ªói v√≤ng l·∫∑p
const ENABLE_REINVEST = true;     // t√°i ƒë·∫ßu t∆∞ sau khi b√°n
const KEEPALIVE_URL = 'https://bn-5l7b.onrender.com/health'; // endpoint keepalive

// ====== Bi·∫øn m√¥i tr∆∞·ªùng ======
const API_KEY = process.env.BINANCE_API_KEY;
const API_SECRET = process.env.BINANCE_API_SECRET;

if (!API_KEY || !API_SECRET) {
  console.error('‚ùå Thi·∫øu BINANCE_API_KEY ho·∫∑c BINANCE_API_SECRET trong bi·∫øn m√¥i tr∆∞·ªùng');
  process.exit(1);
}

// ====== Tr·∫°ng th√°i to√†n c·ª•c ======
let filters = { stepSize: 0.00000001, tickSize: 0.01, minNotional: 0 };
let currentBuyOrder = null;
let currentSellOrder = null;
let lastBuyPrice = null;

// ====== Ti·ªán √≠ch ======
async function binanceRequest(method, path, params = {}, isPrivate = false) {
  const baseURL = 'https://api.binance.com';
  const timestamp = Date.now();
  const query = new URLSearchParams(params);

  if (isPrivate) {
    query.append('timestamp', timestamp);
    query.append('recvWindow', '5000');
    const signature = crypto.createHmac('sha256', API_SECRET)
      .update(query.toString())
      .digest('hex');
    query.append('signature', signature);
  }

  const headers = isPrivate ? { 'X-MBX-APIKEY': API_KEY } : {};
  const url = `${baseURL}${path}?${query.toString()}`;
  const res = await axios({ method, url, headers });
  return res.data;
}

function roundStepSize(qty, stepSize) {
  // √©p s·ªë v·ªÅ b·ªôi c·ªßa stepSize v√† ƒë·ªãnh d·∫°ng 8 ch·ªØ s·ªë th·∫≠p ph√¢n
  const q = Math.floor(qty / stepSize) * stepSize;
  return Number(q.toFixed(8));
}

function roundTickSize(price, tickSize) {
  // √©p gi√° v·ªÅ b·ªôi c·ªßa tickSize v√† ƒë·ªãnh d·∫°ng 2 ch·ªØ s·ªë th·∫≠p ph√¢n
  const p = Math.floor(price / tickSize) * tickSize;
  return Number(p.toFixed(2));
}

// ====== Kh·ªüi t·∫°o filter s√†n ======
async function loadFilters() {
  const info = await binanceRequest('GET', '/api/v3/exchangeInfo');
  const symbolInfo = info.symbols.find(s => s.symbol === SYMBOL);
  if (!symbolInfo) throw new Error(`Kh√¥ng t√¨m th·∫•y symbol ${SYMBOL}`);

  const lotSize = symbolInfo.filters.find(f => f.filterType === 'LOT_SIZE');
  const priceFilter = symbolInfo.filters.find(f => f.filterType === 'PRICE_FILTER');
  const minNotionalFilter =
    symbolInfo.filters.find(f => f.filterType === 'NOTIONAL') ||
    symbolInfo.filters.find(f => f.filterType === 'MIN_NOTIONAL'); // t∆∞∆°ng th√≠ch c≈©

  filters = {
    stepSize: parseFloat(lotSize?.stepSize || '0.00000001'),
    tickSize: parseFloat(priceFilter?.tickSize || '0.01'),
    minNotional: minNotionalFilter
      ? parseFloat(minNotionalFilter.minNotional || minNotionalFilter.notional || '0')
      : 0
  };

  console.log('Filters:', filters);
}

// ====== Th√¥ng tin t√†i kho·∫£n ======
async function getBalances() {
  const acc = await binanceRequest('GET', '/api/v3/account', {}, true);
  const usdt = acc.balances.find(b => b.asset === QUOTE) || { free: '0' };
  const paxg = acc.balances.find(b => b.asset === BASE) || { free: '0' };
  return {
    usdtFree: parseFloat(usdt.free),
    paxgFree: parseFloat(paxg.free)
  };
}

// Gi√° trung b√¨nh ƒë√£ mua (gi√° v·ªën) t·ª´ t√†i kho·∫£n (Binance Savings/Wallet)
async function getAverageBuyPrice(asset) {
  try {
    const data = await binanceRequest('GET', '/sapi/v1/capital/config/getall', {}, true);
    const assetInfo = Array.isArray(data) ? data.find(a => a.coin === asset || a.asset === asset) : null;

    // M·ªôt s·ªë t√†i kho·∫£n tr·∫£ v·ªÅ avgPrice, m·ªôt s·ªë kh√¥ng ‚Äî x·ª≠ l√Ω m·ªÅm d·∫ªo
    const avg =
      assetInfo?.avgPrice ??
      assetInfo?.price ??          // fallback ƒë√¥i khi l√† price
      assetInfo?.costPrice ??      // ho·∫∑c costPrice
      null;

    if (!avg) {
      console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y gi√° trung b√¨nh cho ${asset} t·ª´ capital/config/getall`);
      return null;
    }
    const avgNum = parseFloat(avg);
    if (Number.isFinite(avgNum) && avgNum > 0) return avgNum;

    console.log(`‚ö†Ô∏è Tr∆∞·ªùng gi√° trung b√¨nh kh√¥ng h·ª£p l·ªá cho ${asset}: ${avg}`);
    return null;
  } catch (e) {
    console.log('‚ö†Ô∏è L·ªói l·∫•y gi√° trung b√¨nh t·ª´ capital API:', e.response?.data || e.message);
    return null;
  }
}

// ====== ƒê∆°n h√†ng ======
async function checkOpenOrders() {
  const orders = await binanceRequest('GET', '/api/v3/openOrders', { symbol: SYMBOL }, true);
  currentBuyOrder = orders.find(o => o.side === 'BUY') || null;
  currentSellOrder = orders.find(o => o.side === 'SELL') || null;
}

async function placeBuyOrder(price) {
  const { usdtFree } = await getBalances();
  const maxBuyUSD = Math.min(BUY_AMOUNT_USD, usdtFree);
  if (maxBuyUSD <= 0) {
    console.log(`‚ùå Kh√¥ng ƒë·ªß USDT ƒë·ªÉ mua. S·ªë d∆∞: ${usdtFree}`);
    return;
  }

  let qty = maxBuyUSD / price;
  qty = roundStepSize(qty, filters.stepSize);

  if (qty * price < filters.minNotional) {
    console.log(`‚ùå L·ªánh mua kh√¥ng ƒë·∫°t minNotional (${filters.minNotional} ${QUOTE})`);
    return;
  }

  console.log(`‚úÖ ƒê·∫∑t MUA ${qty} ${SYMBOL} t·∫°i ${price}`);
  const order = await binanceRequest('POST', '/api/v3/order', {
    symbol: SYMBOL,
    side: 'BUY',
    type: 'LIMIT',
    timeInForce: 'GTC',
    quantity: qty,
    price
  }, true);

  currentBuyOrder = order;
}

async function placeSellOrder(price, qty) {
  const { paxgFree } = await getBalances();
  let sellQty = Math.min(qty, paxgFree);
  sellQty = roundStepSize(sellQty, filters.stepSize);

  if (sellQty <= 0) {
    console.log(`‚ùå Kh√¥ng ƒë·ªß ${BASE} ƒë·ªÉ b√°n. S·ªë d∆∞: ${paxgFree}`);
    return;
  }

  if (sellQty * price < filters.minNotional) {
    console.log(`‚ùå L·ªánh b√°n kh√¥ng ƒë·∫°t minNotional (${filters.minNotional} ${QUOTE})`);
    return;
  }

  console.log(`‚úÖ ƒê·∫∑t B√ÅN ${sellQty} ${SYMBOL} t·∫°i ${price}`);
  const order = await binanceRequest('POST', '/api/v3/order', {
    symbol: SYMBOL,
    side: 'SELL',
    type: 'LIMIT',
    timeInForce: 'GTC',
    quantity: sellQty,
    price
  }, true);

  currentSellOrder = order;
}

async function checkFilledOrders() {
  // L·ªánh mua
  if (currentBuyOrder) {
    const order = await binanceRequest('GET', '/api/v3/order', {
      symbol: SYMBOL,
      orderId: currentBuyOrder.orderId
    }, true);

    if (order.status === 'FILLED') {
      lastBuyPrice = parseFloat(order.price);
      currentBuyOrder = null;
      console.log(`‚úÖ ƒê√£ mua ${order.executedQty} ${BASE} t·∫°i gi√° ${lastBuyPrice}`);
    }
  }

  // L·ªánh b√°n
  if (currentSellOrder) {
    const order = await binanceRequest('GET', '/api/v3/order', {
      symbol: SYMBOL,
      orderId: currentSellOrder.orderId
    }, true);

    if (order.status === 'FILLED') {
      console.log(`üí∞ ƒê√£ b√°n ${order.executedQty} ${BASE} t·∫°i gi√° ${order.price}`);
      currentSellOrder = null;
      lastBuyPrice = null;

      // T√°i ƒë·∫ßu t∆∞ (t√πy ch·ªçn)
      if (ENABLE_REINVEST) {
        const balances = await getBalances();
        if (balances.usdtFree >= BUY_AMOUNT_USD) {
          const ticker = await binanceRequest('GET', '/api/v3/ticker/price', { symbol: SYMBOL });
          const currentPrice = parseFloat(ticker.price);
          const buyPrice = roundTickSize(currentPrice - 10, filters.tickSize);
          console.log(`üîÑ T√°i ƒë·∫ßu t∆∞: ƒë·∫∑t l·ªánh mua m·ªõi t·∫°i ${buyPrice}`);
          await placeBuyOrder(buyPrice);
        } else {
          console.log(`‚è∏ Kh√¥ng ƒë·ªß USDT ƒë·ªÉ t√°i ƒë·∫ßu t∆∞ (c·∫ßn ‚â• ${BUY_AMOUNT_USD})`);
        }
      }
    }
  }
}

// ====== V√≤ng l·∫∑p bot ======
async function botLoop() {
  try {
    await checkOpenOrders();
    await checkFilledOrders();

    const ticker = await binanceRequest('GET', '/api/v3/ticker/price', { symbol: SYMBOL });
    const currentPrice = parseFloat(ticker.price);
    const balances = await getBalances();

    console.log(`üìä Gi√° hi·ªán t·∫°i: ${currentPrice} | ${QUOTE}: ${balances.usdtFree} | ${BASE}: ${balances.paxgFree}`);
    console.log(`üìå L·ªánh ch·ªù mua: ${currentBuyOrder ? JSON.stringify({ id: currentBuyOrder.orderId, price: currentBuyOrder.price }) : 'Kh√¥ng c√≥'}`);
    console.log(`üìå L·ªánh ch·ªù b√°n: ${currentSellOrder ? JSON.stringify({ id: currentSellOrder.orderId, price: currentSellOrder.price }) : 'Kh√¥ng c√≥'}`);

    // N·∫øu ƒëang c√≥ PAXG v√† ch∆∞a c√≥ l·ªánh SELL -> t·ª± ƒë·ªông truy xu·∫•t gi√° trung b√¨nh v√† ƒë·∫∑t SELL to√†n b·ªô t·∫°i avg + 20
    if (balances.paxgFree > 0 && !currentSellOrder) {
      // ∆Øu ti√™n d√πng lastBuyPrice n·∫øu v·ª´a mua xong; n·∫øu ch∆∞a c√≥, l·∫•y gi√° trung b√¨nh t·ª´ t√†i kho·∫£n
      if (lastBuyPrice === null) {
        const avg = await getAverageBuyPrice(BASE);
        if (!avg) {
          console.log('‚è∏ Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° trung b√¨nh. B·ªè qua v√≤ng n√†y.');
          return;
        }
        lastBuyPrice = avg;
        console.log(`üìà Gi√° trung b√¨nh mua v√†o c·ªßa ${BASE}: ${lastBuyPrice}`);
      }

      const sellPrice = roundTickSize(lastBuyPrice + 20, filters.tickSize);
      await placeSellOrder(sellPrice, balances.paxgFree);
      return; // ∆∞u ti√™n b√°n tr∆∞·ªõc, kh√¥ng ƒë·∫∑t mua trong v√≤ng n√†y
    }

    // N·∫øu kh√¥ng c√≥ PAXG: ch·ªâ log (mua s·∫Ω x·∫£y ra khi t√°i ƒë·∫ßu t∆∞ ho·∫∑c t√πy chi·∫øn l∆∞·ª£c ri√™ng)
    if (balances.paxgFree === 0) {
      console.log(`‚è∏ Kh√¥ng c√≥ ${BASE} trong v√≠. Ch·ªù l·ªánh mua ƒë∆∞·ª£c kh·ªõp ho·∫∑c t√°i ƒë·∫ßu t∆∞.`);
    }

  } catch (err) {
    console.error('üö® L·ªói:', err.response?.data || err.message);
  }
}

// ====== Kh·ªüi ƒë·ªông bot ======
(async () => {
  await loadFilters();
  console.log('üöÄ Bot PAXG b·∫Øt ƒë·∫ßu ch·∫°y...');
  setInterval(botLoop, INTERVAL);
})();

// ====== HTTP server & keepalive ======
app.get('/health', (req, res) => res.json({ status: 'ok' }));
app.get('/', (req, res) => res.send('Bot PAXG ƒëang ch·∫°y...'));

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üåê Server listening on port ${PORT}`));

// ping gi·ªØ d·ªãch v·ª• s·ªëng
if (KEEPALIVE_URL) {
  setInterval(() => {
    axios.get(KEEPALIVE_URL)
      .then(res => console.log(`üîî Ping at ${new Date().toISOString()} - ${res.status}`))
      .catch(err => console.error(`Ping error: ${err.message}`));
  }, 14 * 60 * 1000); // 14 ph√∫t
}
