// botpaxg.js
'use strict';

const express = require('express');
const axios = require('axios').default;
const crypto = require('crypto');

const app = express();
app.use(express.json());

// ====== C·∫•u h√¨nh ======
const SYMBOL = 'PAXGUSDT';
const QUOTE = 'USDT';
const BASE = 'PAXG';
const BUY_AMOUNT_USD = 80;              // USDT cho m·ªói l·ªánh mua
const INTERVAL = 30_000;                // 30s/l·∫ßn
const ENABLE_REINVEST = true;           // t√°i ƒë·∫ßu t∆∞ sau khi b√°n
const KEEPALIVE_URL = 'https://bn-5l7b.onrender.com/health';

// ====== API key ======
const API_KEY = process.env.BINANCE_API_KEY;
const API_SECRET = process.env.BINANCE_API_SECRET;
if (!API_KEY || !API_SECRET) {
  console.error('‚ùå Thi·∫øu BINANCE_API_KEY ho·∫∑c BINANCE_API_SECRET trong bi·∫øn m√¥i tr∆∞·ªùng');
  process.exit(1);
}

// ====== Tr·∫°ng th√°i ======
let filters = { stepSize: 0.00000001, tickSize: 0.01, minNotional: 0, minQty: 0 };
let currentBuyOrder = null;
let currentSellOrder = null;
let lastBuyPrice = null;

// ====== G·ªçi API Binance ======
async function binanceRequest(method, path, params = {}, isPrivate = false) {
  const baseURL = 'https://api.binance.com';
  const query = new URLSearchParams(params);
  if (isPrivate) {
    query.append('timestamp', Date.now());
    query.append('recvWindow', '5000');
    const signature = crypto.createHmac('sha256', API_SECRET)
      .update(query.toString())
      .digest('hex');
    query.append('signature', signature);
  }
  const headers = isPrivate ? { 'X-MBX-APIKEY': API_KEY } : {};
  const url = `${baseURL}${path}?${query.toString()}`;
  const res = await axios({ method, url, headers });
  return res.data;
}

// ====== Round theo stepSize/tickSize ======
function roundStepSize(qty, stepSize) {
  const q = Math.floor(qty / stepSize) * stepSize;
  return Number(q.toFixed(8));
}
function roundTickSize(price, tickSize) {
  const p = Math.floor(price / tickSize) * tickSize;
  return Number(p.toFixed(2));
}

// ====== Load filters ======
async function loadFilters() {
  const info = await binanceRequest('GET', '/api/v3/exchangeInfo');
  const s = info.symbols.find(x => x.symbol === SYMBOL);
  if (!s) throw new Error(`Kh√¥ng t√¨m th·∫•y symbol ${SYMBOL}`);

  const lot = s.filters.find(f => f.filterType === 'LOT_SIZE');
  const priceF = s.filters.find(f => f.filterType === 'PRICE_FILTER');
  const notional =
    s.filters.find(f => f.filterType === 'NOTIONAL') ||
    s.filters.find(f => f.filterType === 'MIN_NOTIONAL');

  filters = {
    stepSize: parseFloat(lot?.stepSize || '0.00000001'),
    tickSize: parseFloat(priceF?.tickSize || '0.01'),
    minNotional: notional ? parseFloat(notional.minNotional || notional.notional || '0') : 0,
    minQty: parseFloat(lot?.minQty || '0')
  };
  console.log('Filters:', filters);
}

// ====== S·ªë d∆∞ ======
async function getBalances() {
  const acc = await binanceRequest('GET', '/api/v3/account', {}, true);
  const usdt = acc.balances.find(b => b.asset === QUOTE) || { free: '0' };
  const paxg = acc.balances.find(b => b.asset === BASE) || { free: '0' };
  return {
    usdtFree: parseFloat(usdt.free),
    paxgFree: parseFloat(paxg.free)
  };
}

// ====== L·∫•y gi√° trung b√¨nh ƒë√£ mua ======
// 1) ∆Øu ti√™n t·ª´ capital/config/getall (n·∫øu t√†i kho·∫£n h·ªó tr·ª£)
async function getAverageBuyPriceFromCapital(asset) {
  try {
    const data = await binanceRequest('GET', '/sapi/v1/capital/config/getall', {}, true);
    const assetInfo = Array.isArray(data) ? data.find(a => a.coin === asset || a.asset === asset) : null;
    const avg = assetInfo?.avgPrice ?? assetInfo?.price ?? assetInfo?.costPrice ?? null;
    if (!avg) {
      console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y gi√° trung b√¨nh cho ${asset} t·ª´ capital/config/getall`);
      return null;
    }
    const avgNum = parseFloat(avg);
    return Number.isFinite(avgNum) && avgNum > 0 ? avgNum : null;
  } catch (e) {
    console.log('‚ö†Ô∏è L·ªói l·∫•y gi√° trung b√¨nh t·ª´ capital API:', e.response?.data || e.message);
    return null;
  }
}

// 2) Fallback: t√≠nh t·ª´ l·ªãch s·ª≠ giao d·ªãch myTrades theo FIFO (gi√° v·ªën t·ªìn kho c√≤n l·∫°i)
async function fetchAllTrades(symbol, maxPages = 50) {
  const all = [];
  let fromId;
  for (let i = 0; i < maxPages; i++) {
    const params = { symbol, limit: 1000 };
    if (fromId !== undefined) params.fromId = fromId;
    const batch = await binanceRequest('GET', '/api/v3/myTrades', params, true);
    if (!Array.isArray(batch) || batch.length === 0) break;
    all.push(...batch);
    const last = batch[batch.length - 1];
    const nextId = typeof last.id === 'number' ? last.id + 1 : undefined;
    if (!nextId || batch.length < 1000) break;
    fromId = nextId;
  }
  all.sort((a, b) => a.time - b.time || a.id - b.id);
  return all;
}

function computeRemainingPositionAvgPriceFIFO(trades) {
  const lots = [];
  const f = v => parseFloat(v);

  for (const t of trades) {
    const qty = f(t.qty);
    const price = f(t.price);
    const commission = f(t.commission || 0);
    const commissionAsset = t.commissionAsset;

    if (t.isBuyer) {
      let qtyNet = qty;
      let totalCost = qty * price;
      if (commissionAsset === BASE) qtyNet = Math.max(0, qtyNet - commission);
      else if (commissionAsset === QUOTE) totalCost += commission;
      if (qtyNet > 0) lots.push({ qty: qtyNet, unitCost: totalCost / qtyNet });
    } else {
      let remaining = qty;
      if (commissionAsset === BASE) remaining = Math.max(0, remaining - commission);
      while (remaining > 0 && lots.length > 0) {
        const lot = lots[0];
        const take = Math.min(lot.qty, remaining);
        lot.qty -= take;
        remaining -= take;
        if (lot.qty <= 1e-8) lots.shift();
      }
    }
  }

  const remQty = lots.reduce((s, l) => s + l.qty, 0);
  const remCost = lots.reduce((s, l) => s + l.qty * l.unitCost, 0);
  return remQty > 0 && remCost > 0 ? remCost / remQty : null;
}

async function getAverageBuyPriceFromTrades(symbol) {
  try {
    const trades = await fetchAllTrades(symbol);
    if (!trades || trades.length === 0) {
      console.log('‚ö†Ô∏è Kh√¥ng c√≥ l·ªãch s·ª≠ giao d·ªãch ƒë·ªÉ t√≠nh gi√° trung b√¨nh.');
      return null;
    }
    const avg = computeRemainingPositionAvgPriceFIFO(trades);
    return avg && Number.isFinite(avg) && avg > 0 ? avg : null;
  } catch (e) {
    console.log('‚ö†Ô∏è L·ªói myTrades:', e.response?.data || e.message);
    return null;
  }
}

async function getAverageBuyPrice(asset, symbol) {
  const avgCapital = await getAverageBuyPriceFromCapital(asset);
  if (avgCapital) return avgCapital;
  const avgTrades = await getAverageBuyPriceFromTrades(symbol);
  if (avgTrades) return avgTrades;
  return null;
}

// ====== ƒê∆°n h√†ng ======
async function checkOpenOrders() {
  const orders = await binanceRequest('GET', '/api/v3/openOrders', { symbol: SYMBOL }, true);
  currentBuyOrder = orders.find(o => o.side === 'BUY') || null;
  currentSellOrder = orders.find(o => o.side === 'SELL') || null;
}

async function placeBuyOrder(price) {
  const { usdtFree } = await getBalances();
  const amountUSD = Math.min(BUY_AMOUNT_USD, usdtFree);
  if (amountUSD < filters.minNotional) {
    console.log(`‚ùå Kh√¥ng ƒë·ªß USDT ƒë·ªÉ mua (c·∫ßn >= ${filters.minNotional})`);
    return;
  }
  let qty = roundStepSize(amountUSD / price, filters.stepSize);
  if (qty < filters.minQty) {
    console.log(`‚ùå L∆∞·ª£ng mua (${qty}) < minQty (${filters.minQty})`);
    return;
  }
  console.log(`‚úÖ ƒê·∫∑t MUA ${qty} ${SYMBOL} t·∫°i ${price}`);
  const o = await binanceRequest('POST', '/api/v3/order', {
    symbol: SYMBOL, side: 'BUY', type: 'LIMIT',
    timeInForce: 'GTC', quantity: qty, price
  }, true);
  currentBuyOrder = o;
}

async function placeSellOrder(price, qtyWanted) {
  const { paxgFree } = await getBalances();

  // Dust: ƒë·ªÉ botLoop x·ª≠ l√Ω mua l·∫°i
  if (paxgFree < filters.minQty) {
    console.log(`‚ÑπÔ∏è PAXG (${paxgFree}) < minQty (${filters.minQty}) ‚Üí d∆∞ sau b√°n tr∆∞·ªõc ƒë√≥.`);
    return;
  }

  let qty = roundStepSize(Math.min(qtyWanted, paxgFree), filters.stepSize);
  if (qty < filters.minQty) {
    console.log(`‚ÑπÔ∏è L∆∞·ª£ng b√°n (${qty}) < minQty (${filters.minQty}) ‚Üí d∆∞ sau b√°n tr∆∞·ªõc.`);
    return;
  }
  if (qty * price < filters.minNotional) {
    console.log(`‚ÑπÔ∏è T·ªïng gi√° tr·ªã b√°n (${(qty * price).toFixed(2)}) < minNotional (${filters.minNotional}) ‚Üí coi l√† d∆∞.`);
    return;
  }

  console.log(`‚úÖ ƒê·∫∑t B√ÅN ${qty} ${SYMBOL} t·∫°i ${price}`);
  const o = await binanceRequest('POST', '/api/v3/order', {
    symbol: SYMBOL, side: 'SELL', type: 'LIMIT',
    timeInForce: 'GTC', quantity: qty, price
  }, true);
  currentSellOrder = o;
}

async function checkFilledOrders() {
  // BUY filled -> l∆∞u lastBuyPrice
  if (currentBuyOrder) {
    const o = await binanceRequest('GET', '/api/v3/order', {
      symbol: SYMBOL, orderId: currentBuyOrder.orderId
    }, true);
    if (o.status === 'FILLED') {
      lastBuyPrice = parseFloat(o.price);
      currentBuyOrder = null;
      console.log(`‚úÖ ƒê√£ mua ${o.executedQty} ${BASE} t·∫°i ${lastBuyPrice}`);
    }
  }

  // SELL filled -> reset v√† t√°i ƒë·∫ßu t∆∞ (n·∫øu b·∫≠t)
  if (currentSellOrder) {
    const o = await binanceRequest('GET', '/api/v3/order', {
      symbol: SYMBOL, orderId: currentSellOrder.orderId
    }, true);
    if (o.status === 'FILLED') {
      console.log(`üí∞ ƒê√£ b√°n ${o.executedQty} ${BASE} t·∫°i ${o.price}`);
      currentSellOrder = null;
      lastBuyPrice = null;

      if (ENABLE_REINVEST) {
        const { usdtFree } = await getBalances();
        if (usdtFree >= BUY_AMOUNT_USD) {
          const t = await binanceRequest('GET', '/api/v3/ticker/price', { symbol: SYMBOL });
          const buyPrice = roundTickSize(parseFloat(t.price) - 10, filters.tickSize);
          console.log(`üîÑ T√°i ƒë·∫ßu t∆∞: ƒë·∫∑t l·ªánh mua t·∫°i ${buyPrice}`);
          await placeBuyOrder(buyPrice);
        } else {
          console.log(`‚è∏ Kh√¥ng ƒë·ªß USDT ƒë·ªÉ t√°i ƒë·∫ßu t∆∞ (c·∫ßn ‚â• ${BUY_AMOUNT_USD})`);
        }
      }
    }
  }
}

// ====== Bot loop ======
async function botLoop() {
  try {
    await checkOpenOrders();
    await checkFilledOrders();

    const t = await binanceRequest('GET', '/api/v3/ticker/price', { symbol: SYMBOL });
    const currentPrice = parseFloat(t.price);
    const { usdtFree, paxgFree } = await getBalances();

    console.log(`üìä Gi√° hi·ªán t·∫°i: ${currentPrice} | ${QUOTE}: ${usdtFree} | ${BASE}: ${paxgFree}`);
    console.log(`üìå L·ªánh ch·ªù mua: ${currentBuyOrder ? JSON.stringify({ id: currentBuyOrder.orderId, price: currentBuyOrder.price }) : 'Kh√¥ng c√≥'}`);
    console.log(`üìå L·ªánh ch·ªù b√°n: ${currentSellOrder ? JSON.stringify({ id: currentSellOrder.orderId, price: currentSellOrder.price }) : 'Kh√¥ng c√≥'}`);

    // Dust PAXG: coi l√† d∆∞ sau b√°n -> chuy·ªÉn sang BUY n·∫øu ƒë·ªß USDT
    if (paxgFree > 0 && paxgFree < filters.minQty && !currentBuyOrder) {
      console.log(`‚ÑπÔ∏è PAXG (${paxgFree}) < minQty (${filters.minQty}) ‚Üí d∆∞ sau b√°n. Ki·ªÉm tra USDT ƒë·ªÉ mua l·∫°i.`);
      if (usdtFree >= BUY_AMOUNT_USD) {
        const buyPrice = roundTickSize(currentPrice - 10, filters.tickSize);
        console.log(`üîÑ ƒê·∫∑t l·ªánh MUA m·ªõi t·∫°i ${buyPrice}`);
        await placeBuyOrder(buyPrice);
      } else {
        console.log(`‚è∏ Kh√¥ng ƒë·ªß USDT ƒë·ªÉ mua l·∫°i (c·∫ßn ‚â• ${BUY_AMOUNT_USD})`);
      }
      return;
    }

    // ƒêang c√≥ PAXG ƒë·ªß ƒë·ªÉ b√°n v√† ch∆∞a c√≥ SELL -> ƒë·∫∑t SELL theo gi√° trung b√¨nh + 20
    if (paxgFree >= filters.minQty && !currentSellOrder) {
      if (lastBuyPrice === null) {
        const avg = await getAverageBuyPrice(BASE, SYMBOL);
        if (!avg) {
          console.log('‚è∏ Kh√¥ng truy xu·∫•t/t√≠nh ƒë∆∞·ª£c gi√° trung b√¨nh. B·ªè qua v√≤ng n√†y.');
          return;
        }
        lastBuyPrice = avg;
        console.log(`üìà Gi√° trung b√¨nh mua v√†o c·ªßa ${BASE}: ${lastBuyPrice}`);
      }
      const sellPrice = roundTickSize(lastBuyPrice + 20, filters.tickSize);
      await placeSellOrder(sellPrice, paxgFree);
      return; // ∆∞u ti√™n b√°n tr∆∞·ªõc
    }

    // Kh√¥ng c√≥ PAXG (ho·∫∑c ƒë√£ x·ª≠ l√Ω ·ªü tr√™n): c√≥ th·ªÉ ƒë·∫∑t BUY n·∫øu ch∆∞a c√≥ BUY
    if (paxgFree === 0 && !currentBuyOrder) {
      if (usdtFree >= BUY_AMOUNT_USD) {
        const buyPrice = roundTickSize(currentPrice - 10, filters.tickSize);
        await placeBuyOrder(buyPrice);
      } else {
        console.log(`‚ùå USDT < ${BUY_AMOUNT_USD}, ch·ªù t√≠ch l≈©y th√™m.`);
      }
    }
  } catch (e) {
    console.error('üö® L·ªói:', e.response?.data || e.message);
  }
}

// ====== Kh·ªüi ƒë·ªông ======
(async () => {
  await loadFilters();
  console.log('üöÄ Bot PAXG b·∫Øt ƒë·∫ßu ch·∫°y...');
  setInterval(botLoop, INTERVAL);
})();

// ====== HTTP & keepalive ======
app.get('/health', (_, r) => r.json({ status: 'ok' }));
app.get('/', (_, r) => r.send('Bot PAXG ƒëang ch·∫°y...'));
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üåê Server listening on port ${PORT}`));

if (KEEPALIVE_URL) {
  setInterval(() => {
    axios.get(KEEPALIVE_URL)
      .then(res => console.log(`üîî Ping at ${new Date().toISOString()} - ${res.status}`))
      .catch(err => console.error(`Ping error: ${err.message}`));
  }, 14 * 60 * 1000);
}
